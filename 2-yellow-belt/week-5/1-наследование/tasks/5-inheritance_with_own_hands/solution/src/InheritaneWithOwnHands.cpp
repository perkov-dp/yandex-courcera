#include <iostream>
#include <string>
using namespace std;

class Animal {
public:
	/* Здесь надо сказать одну очень важную вещь:
	 * в языке C++ все объекты всегда имеют две стадии: либо объект сейчас создается,
	 * вот в данный текущий момент происходит его создание,
	 * он только-только появляется в памяти, его поля инициализируются,
	 * но он ещё до конца не создан. А вторая стадия – это момент, когда уже объект создан,
	 * то есть под него выделена память, там всё проинициализировано, как надо, и мы с ним работаем.
	 * Мы смогли проинициализировать переменную type нужным нам значением t с помощью
	 * синтаксиса списков инициализации.*/
	Animal(const string& name) : Name(name) {}

    const string Name;
};

//	Класс Dog должен являться наследником класса Animal.
class Dog : public Animal {
public:
    //	Конструктор класса Dog должен принимать параметр типа string
	//	и инициализировать им поле Name в классе Animal.
	Dog (const string& str) : Animal(str) {
		Animal animal(str);
	};
    void Bark() {
        cout << Name << " barks: woof!" << endl;
    }
};

int main () {
	Dog dog("Derik");
	dog.Bark();

	return 0;
}
