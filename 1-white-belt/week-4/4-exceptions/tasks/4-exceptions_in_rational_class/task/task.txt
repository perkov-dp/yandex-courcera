¬спомним класс Rational, который мы реализовали в задачах, посв€щЄнных перегрузке операторов. 
“ам специально говорилось, что в тестах объекты класса Rational никогда не создаютс€ с нулевым знаменателем и никогда не выполн€етс€ деление на ноль. 
Ќастало врем€ избавитьс€ от этого ограничени€ и научитьс€ обрабатывать нулевой знаменатель и деление на ноль. ¬ этой задаче вам предстоит это сделать.

ѕомен€йте реализацию конструктора класса Rational так, 
чтобы он выбрасывал исключение invalid_argument (https://en.cppreference.com/w/cpp/error/invalid_argument), 
если знаменатель равен нулю. 
 роме того, переделайте реализацию оператора делени€ дл€ класса Rational так, 
чтобы он выбрасывал исключение domain_error (https://en.cppreference.com/mwiki/index.php?title=Special%3ASearch&search=domain_error), 
если делитель равен нулю.

Ќапомним, что вам надо реализовать интерфейс
class Rational {
public:
  Rational();
  Rational(int numerator, int denominator);

  int Numerator() const;
  int Denominator() const;
};

и оператор делени€ дл€ класса Rational
Rational operator / (const Rational& lhs, const Rational& rhs);

“ак же, как и в задачах на перегрузку операторов, вам будет предложен файл с заготовкой кода. 
‘ункци€ main в этом файле содержит р€д юнит-тестов, которые позвол€т вам проверить свою реализацию. 
ѕри проверке вашего решени€ оно будет тестироватьс€ на более полном наборе тестов, так что успешное прохождение всех юнит-тестов не гарантирует, 
что ваша реализаци€ будет зачтена.

Ўаблон программы:
находитс€ в файле rational_throw.cpp